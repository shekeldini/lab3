#include <iostream>
using namespace std;

class Footballer {
private:
    string last_name;
    string team;
    float height;
    float weight;
public:
    Footballer(string = "Last_name", string = "Team", float = 0.0, float = 0.0);
    

    void Set_height(float height)
    {

        this->height = height;
    }

    void Set_weight(float weight)
    {
        this->weight = weight;
    }

    virtual void print()
    {
        cout << "\nFootballer: \n" 
            << "Last Name: " << last_name 
            << " \nHeight: " << height 
            << " \nWeight: " << weight 
            << " \nTeam: " << team;
    }
    string Get_last_name()
    {
        return last_name;
    }
    string Get_team()
    {
        return team;
    }
    float Get_height()
    {
        return height;
    }
    float Get_weight()
    {
        return weight;
    }

    Footballer(const Footballer& other) : last_name(other.last_name), team(other.team), height(other.height), weight(other.weight) {}
    
    

    Footballer& operator= (Footballer& other)
    {
        if (this != &other)
        {
            last_name = other.last_name;
            team = other.team;
            weight = other.weight;
            height = other.height;
        }
        return *this;
    }
    ~Footballer() 
    {
        last_name.clear();
        team.clear();
    };
    
};
class Attacking : public Footballer {
private:
    unsigned short mastery;
    int gol;
public:
    Attacking(string = "Last_name", string = "Team", float = 0.0, float = 0.0, unsigned short = 0, int = 0);
    friend void change_mastery(Attacking& a, int mastery);
    friend void change_mastery1(Attacking& a);
    void print() override
    {
        cout << "\nAttacking: \n" 
            << "Last Name: " << Get_last_name() 
            << " \nHeight: " << Get_height() 
            << " \nWeight: " << Get_weight() 
            << " \nTeam: " << Get_team()
            <<"\nMastery: "<< mastery
            <<"\nGol: "<<gol << endl;
    }
    Attacking(const Attacking& other) :Footballer(other),mastery(other.mastery),gol(other.gol) {}


    Attacking& operator= (Attacking& other)
    {
        if (this != &other)
        {
            Footballer::operator=(other);
            mastery = other.mastery;
            gol = other.gol;
        }
        return *this;
    }

    void Set_gol(int gol)
    {
        this->gol = gol;
    }
    void Set_mastery(unsigned short mastery)
    {
        this->mastery = mastery;
    }
    void Add_gol()
    {
        gol++;
    }
    ~Attacking() {};
};
void change_mastery(Attacking & a,int mastery)
{
    a.mastery = mastery;  
}


class Quarterback : public Footballer {
private:
    int matches;
    int victory;
public:
    Quarterback(string= "Last_name", string = "Team ", float = 0, float = 0, int = 0, int = 0);

    Quarterback(const Quarterback& other) :Footballer(other), matches(other.matches), victory(other.victory) {}

    Quarterback& operator= (Quarterback& other)
    {
        if (this != &other)
        {
        Footballer::operator=(other);
        matches = other.matches;
        victory = other.victory;
        }
        return *this;
    }

    void Set_matches(int matches)
    {
        this->matches = matches;
    }
    void Set_victory(int victory)
    {
        this->victory = victory;
    }
    void Add_matches(int matches)
    {
        this->matches += matches;
    }
    void Add_victory(int victory)
    {
        this->victory += victory;
    }
    void print() override
    {
        cout << "\nQuarterback: \n" 
            << "Last Name: " << Get_last_name() 
            << " \nHeight: " << Get_height() 
            << " \nWeight: " << Get_weight() 
            << " \nTeam: " << Get_team() 
            << "\nMatches: " << matches 
            << "\nVictory: " << victory<<endl;
    }
    ~Quarterback() {};
};
Footballer::Footballer(string last_name, string team, float height, float weight) :
    last_name(last_name), team(team), height(height), weight(weight) {}

Attacking::Attacking(string last_name, string team, float height, float weight, unsigned short mastery, int gol) :
    Footballer(last_name, team, height, weight), mastery(mastery), gol(gol){}

Quarterback::Quarterback(string last_name, string team, float height, float weight, int matches, int victory) :
    Footballer(last_name, team, height, weight), matches(matches), victory(victory) {}


int main()
{
   
    Attacking player ("Ivanov", "Dream");
    
    player.Set_height(175.2);
    player.Set_weight(73.5);
    player.Set_mastery(5);
    player.Set_gol(10);
    player.Add_gol();
    change_mastery(player,10);
    player.print();

    
    
    Quarterback player1("Isayan", "Dream");
    
    player1.Set_height(179);
    player1.Set_weight(70);
    player1.Set_matches(10);
    player1.Set_victory(10);
    player1.Add_matches(2);
    player1.Add_victory(1);
    player1.print();

    Quarterback player2 = player1;
    player2.print();
}

